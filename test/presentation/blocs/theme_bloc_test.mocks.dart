// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_theme_showcase/test/presentation/blocs/theme_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter/material.dart' as _i11;
import 'package:flutter_theme_showcase/core/errors/failures.dart' as _i6;
import 'package:flutter_theme_showcase/domain/entities/theme_entity.dart'
    as _i7;
import 'package:flutter_theme_showcase/domain/repositories/theme_repository.dart'
    as _i2;
import 'package:flutter_theme_showcase/domain/use_cases/theme/get_available_themes_use_case.dart'
    as _i8;
import 'package:flutter_theme_showcase/domain/use_cases/theme/get_current_theme_use_case.dart'
    as _i4;
import 'package:flutter_theme_showcase/domain/use_cases/theme/manage_theme_mode_use_case.dart'
    as _i10;
import 'package:flutter_theme_showcase/domain/use_cases/theme/switch_theme_use_case.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeThemeRepository_0 extends _i1.SmartFake
    implements _i2.ThemeRepository {
  _FakeThemeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCurrentThemeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentThemeUseCase extends _i1.Mock
    implements _i4.GetCurrentThemeUseCase {
  MockGetCurrentThemeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ThemeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeThemeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ThemeRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.ThemeEntity>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.ThemeEntity>>.value(
            _FakeEither_1<_i6.Failure, _i7.ThemeEntity>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.ThemeEntity>>);
}

/// A class which mocks [GetAvailableThemesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAvailableThemesUseCase extends _i1.Mock
    implements _i8.GetAvailableThemesUseCase {
  MockGetAvailableThemesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ThemeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeThemeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ThemeRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.ThemeEntity>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.ThemeEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.ThemeEntity>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.ThemeEntity>>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.ThemeEntity>>> getThemesByTags(
          List<String>? tags) =>
      (super.noSuchMethod(
        Invocation.method(
          #getThemesByTags,
          [tags],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.ThemeEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.ThemeEntity>>(
          this,
          Invocation.method(
            #getThemesByTags,
            [tags],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.ThemeEntity>>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.ThemeEntity>>>
      getCustomThemes() => (super.noSuchMethod(
            Invocation.method(
              #getCustomThemes,
              [],
            ),
            returnValue: _i5
                .Future<_i3.Either<_i6.Failure, List<_i7.ThemeEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.ThemeEntity>>(
              this,
              Invocation.method(
                #getCustomThemes,
                [],
              ),
            )),
          ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.ThemeEntity>>>);
}

/// A class which mocks [SwitchThemeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSwitchThemeUseCase extends _i1.Mock
    implements _i9.SwitchThemeUseCase {
  MockSwitchThemeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ThemeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeThemeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ThemeRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.ThemeEntity>> call(String? themeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [themeId],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.ThemeEntity>>.value(
            _FakeEither_1<_i6.Failure, _i7.ThemeEntity>(
          this,
          Invocation.method(
            #call,
            [themeId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.ThemeEntity>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.ThemeEntity>> switchToDefault() =>
      (super.noSuchMethod(
        Invocation.method(
          #switchToDefault,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.ThemeEntity>>.value(
            _FakeEither_1<_i6.Failure, _i7.ThemeEntity>(
          this,
          Invocation.method(
            #switchToDefault,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.ThemeEntity>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.ThemeEntity>> switchToPrevious() =>
      (super.noSuchMethod(
        Invocation.method(
          #switchToPrevious,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.ThemeEntity>>.value(
            _FakeEither_1<_i6.Failure, _i7.ThemeEntity>(
          this,
          Invocation.method(
            #switchToPrevious,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.ThemeEntity>>);
}

/// A class which mocks [ManageThemeModeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockManageThemeModeUseCase extends _i1.Mock
    implements _i10.ManageThemeModeUseCase {
  MockManageThemeModeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ThemeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeThemeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ThemeRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i11.ThemeMode>> getCurrentThemeMode() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentThemeMode,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i11.ThemeMode>>.value(
            _FakeEither_1<_i6.Failure, _i11.ThemeMode>(
          this,
          Invocation.method(
            #getCurrentThemeMode,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i11.ThemeMode>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> setThemeMode(
          _i11.ThemeMode? themeMode) =>
      (super.noSuchMethod(
        Invocation.method(
          #setThemeMode,
          [themeMode],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
            _FakeEither_1<_i6.Failure, void>(
          this,
          Invocation.method(
            #setThemeMode,
            [themeMode],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i11.ThemeMode>> toggleThemeMode() =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleThemeMode,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i11.ThemeMode>>.value(
            _FakeEither_1<_i6.Failure, _i11.ThemeMode>(
          this,
          Invocation.method(
            #toggleThemeMode,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i11.ThemeMode>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> setLightMode() =>
      (super.noSuchMethod(
        Invocation.method(
          #setLightMode,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
            _FakeEither_1<_i6.Failure, void>(
          this,
          Invocation.method(
            #setLightMode,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> setDarkMode() =>
      (super.noSuchMethod(
        Invocation.method(
          #setDarkMode,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
            _FakeEither_1<_i6.Failure, void>(
          this,
          Invocation.method(
            #setDarkMode,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> setSystemMode() =>
      (super.noSuchMethod(
        Invocation.method(
          #setSystemMode,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
            _FakeEither_1<_i6.Failure, void>(
          this,
          Invocation.method(
            #setSystemMode,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> isCurrentMode(
          _i11.ThemeMode? mode) =>
      (super.noSuchMethod(
        Invocation.method(
          #isCurrentMode,
          [mode],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #isCurrentMode,
            [mode],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}
